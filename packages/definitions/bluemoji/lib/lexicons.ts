/* eslint-disable */
// This file is automatically generated, do not edit!

/**
 * @module
 * Contains type declarations for WhiteWind lexicons
 */

import '@atcute/client/lexicons';
import '@atcute/bluesky/lexicons';

declare module '@atcute/client/lexicons' {
	namespace BlueMojiCollectionDefs {
		interface CollectionView {
			[Brand.Type]?: 'blue.moji.collection.defs#collectionView';
			cid: At.CID;
			creator: AppBskyActorDefs.ProfileView;
			indexedAt: string;
			/**
			 * Minimum string length: 1 \
			 * Maximum string length: 64
			 */
			name: string;
			uri: At.Uri;
			avatar?: string;
			/** Minimum: 0 */
			collectionItemCount?: number;
			/**
			 * Maximum string length: 3000 \
			 * Maximum grapheme length: 300
			 */
			description?: string;
			descriptionFacets?: AppBskyRichtextFacet.Main[];
			labels?: ComAtprotoLabelDefs.Label[];
		}
		interface ItemView {
			[Brand.Type]?: 'blue.moji.collection.defs#itemView';
			assets: BlueMojiCollectionItem.Formats_v0;
			name: string;
			/** @default false */
			adultOnly?: boolean;
			alt?: string;
			createdAt?: string;
		}
	}

	namespace BlueMojiCollectionItem {
		interface Record {
			createdAt: string;
			/** Open union to allow for future formats */
			formats: Brand.Union<Formats_v0>;
			/** Should be in the format :emoji: */
			name: string;
			/** @default false */
			adultOnly?: boolean;
			alt?: string;
			copyOf?: At.Uri;
			/** Self-label values for this emoji. Effectively content warnings. */
			labels?: Brand.Union<ComAtprotoLabelDefs.SelfLabels>;
		}
		/** Limiting blobs to 256kb because there may be many on page and these get optimised by ImgProxy anyway */
		type Blob_v0 = At.Blob;
		/** 64kb should be enough for anybody */
		type Bytes_v0 = At.Bytes;
		interface Formats_v0 {
			[Brand.Type]?: 'blue.moji.collection.item#formats_v0';
			apng_128?: Bytes_v0;
			gif_128?: Blob_v0;
			lottie?: Bytes_v0;
			original?: At.Blob;
			png_128?: Blob_v0;
			webp_128?: Blob_v0;
		}
	}

	namespace BlueMojiPackDefs {
		interface BluemojiPackView {
			[Brand.Type]?: 'blue.moji.pack.defs#bluemojiPackView';
			cid: At.CID;
			creator: AppBskyActorDefs.ProfileViewBasic;
			indexedAt: string;
			record: unknown;
			uri: At.Uri;
			items?: ListViewBasic;
			labels?: ComAtprotoLabelDefs.Label[];
			/** Maximum array length: 12 */
			listItemsSample?: ListItemView[];
		}
		interface ListItemView {
			[Brand.Type]?: 'blue.moji.pack.defs#listItemView';
			subject: BlueMojiCollectionDefs.ItemView;
			uri: At.Uri;
		}
		interface ListView {
			[Brand.Type]?: 'blue.moji.pack.defs#listView';
			cid: At.CID;
			creator: AppBskyActorDefs.ProfileViewBasic;
			indexedAt: string;
			/**
			 * Minimum string length: 1 \
			 * Maximum string length: 64
			 */
			name: string;
			uri: At.Uri;
			avatar?: string;
			/**
			 * Maximum string length: 3000 \
			 * Maximum grapheme length: 300
			 */
			description?: string;
			descriptionFacets?: AppBskyRichtextFacet.Main[];
			labels?: ComAtprotoLabelDefs.Label[];
			/** Minimum: 0 */
			listItemCount?: number;
		}
		interface ListViewBasic {
			[Brand.Type]?: 'blue.moji.pack.defs#listViewBasic';
			cid: At.CID;
			/**
			 * Minimum string length: 1 \
			 * Maximum string length: 64
			 */
			name: string;
			uri: At.Uri;
			avatar?: string;
			indexedAt?: string;
			labels?: ComAtprotoLabelDefs.Label[];
			/** Minimum: 0 */
			listItemCount?: number;
		}
	}

	/** Gets a view of a Bluemoji pack */
	namespace BlueMojiPackGetPack {
		interface Params {
			/** Reference (AT-URI) of the Bluemoji pack record */
			bluemojiPack: At.Uri;
		}
		type Input = undefined;
		interface Output {
			bluemojiPack: BlueMojiPackDefs.BluemojiPackView;
		}
	}

	namespace BlueMojiPackListitem {
		interface Record {
			createdAt: string;
			/** Reference (AT-URI) to the pack record (blue.moji.pack) */
			list: At.Uri;
			/** The emoji which is included in the pack */
			subject: BlueMojiCollectionDefs.ItemView;
		}
	}

	namespace BlueMojiPackRecord {
		interface Record {
			createdAt: string;
			items: BlueMojiCollectionDefs.ItemView[];
			/**
			 * Minimum string length: 1 \
			 * Maximum string length: 64
			 */
			name: string;
			/** @default false */
			adultOnly?: boolean;
			/**
			 * Maximum string length: 3000 \
			 * Maximum grapheme length: 300
			 */
			description?: string;
			descriptionFacets?: BlueMojiRichtextFacet.Main[];
			icon?: At.Blob;
			/** Self-label values for this emoji. Effectively content warnings. */
			labels?: Brand.Union<ComAtprotoLabelDefs.SelfLabels>;
		}
	}

	namespace BlueMojiRichtextFacet {
		interface Main {
			[Brand.Type]?: 'blue.moji.richtext.facet';
			/** DID of the user posting the Bluemoji */
			did: string;
			formats: Brand.Union<Formats_v0>;
			/** Name of the Bluemoji in :emoji: format */
			name: string;
			/** @default false */
			adultOnly?: boolean;
			alt?: string;
			/** Self-label values for this emoji. Effectively content warnings. */
			labels?: Brand.Union<ComAtprotoLabelDefs.SelfLabels>;
		}
		/** On the facet, only the CID is provided as this can be combined with the DID to create CDN URLs for non-animated blobs. For APNG and dotLottie, raw Bytes are served and require a com.atproto.repo.getRecord roundtrip on render so are marked with a boolean */
		interface Formats_v0 {
			[Brand.Type]?: 'blue.moji.richtext.facet#formats_v0';
			/** @default false */
			apng_128?: boolean;
			gif_128?: At.CID;
			/** @default false */
			lottie?: boolean;
			png_128?: At.CID;
			webp_128?: At.CID;
		}
	}

	interface Records {
		'blue.moji.collection.item': BlueMojiCollectionItem.Record;
		'blue.moji.pack.listitem': BlueMojiPackListitem.Record;
		'blue.moji.pack.record': BlueMojiPackRecord.Record;
	}

	interface Queries {
		'blue.moji.pack.getPack': {
			params: BlueMojiPackGetPack.Params;
			output: BlueMojiPackGetPack.Output;
		};
	}

	interface Procedures {}
}
